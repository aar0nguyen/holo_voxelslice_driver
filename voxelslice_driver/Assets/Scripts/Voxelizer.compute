#pragma kernel CSVoxelize

RWStructuredBuffer<int> voxelGrid;  // Stores voxelized data
int3 gridSize; // Size of voxel grid (X, Y, Z)
float voxelSize; // Size of each voxel in world units

[numthreads(8, 8, 1)]
void CSVoxelize(uint3 id : SV_DispatchThreadID)
{
	int x = id.x;
	int y = id.y;
	int z = id.z;

	if (x >= gridSize.x || y >= gridSize.y || z >= gridSize.z) return;

	// Convert pixel index to world-space coordinate
	float3 worldPos = float3(x, y, z) * voxelSize;

	// Sample from a texture (e.g., a depth buffer)
	// Replace this with actual texture sampling
	float sampleValue = 1.0; // Placeholder value

	// If the sampled pixel is occupied, set the voxel
	int index = x + gridSize.x * (y + gridSize.y * z);
	voxelGrid[index] = (sampleValue > 0.5) ? 1 : 0;
}
